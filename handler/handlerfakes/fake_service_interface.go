// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"example-project/handler"
	"example-project/model"
	"sync"
)

type FakeServiceInterface struct {
	AddShiftStub        func(model.Employee, model.Shift) ([]model.Shift, error)
	addShiftMutex       sync.RWMutex
	addShiftArgsForCall []struct {
		arg1 model.Employee
		arg2 model.Shift
	}
	addShiftReturns struct {
		result1 []model.Shift
		result2 error
	}
	addShiftReturnsOnCall map[int]struct {
		result1 []model.Shift
		result2 error
	}
	CreateEmployeesStub        func([]model.Employee) (interface{}, error)
	createEmployeesMutex       sync.RWMutex
	createEmployeesArgsForCall []struct {
		arg1 []model.Employee
	}
	createEmployeesReturns struct {
		result1 interface{}
		result2 error
	}
	createEmployeesReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	DeleteEmployeeStub        func(string) (interface{}, error)
	deleteEmployeeMutex       sync.RWMutex
	deleteEmployeeArgsForCall []struct {
		arg1 string
	}
	deleteEmployeeReturns struct {
		result1 interface{}
		result2 error
	}
	deleteEmployeeReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	GetEmployeeByIdStub        func(string) model.Employee
	getEmployeeByIdMutex       sync.RWMutex
	getEmployeeByIdArgsForCall []struct {
		arg1 string
	}
	getEmployeeByIdReturns struct {
		result1 model.Employee
	}
	getEmployeeByIdReturnsOnCall map[int]struct {
		result1 model.Employee
	}
	GetEmployeesDepartmentFilterStub        func(string) ([]model.EmployeeReturn, error)
	getEmployeesDepartmentFilterMutex       sync.RWMutex
	getEmployeesDepartmentFilterArgsForCall []struct {
		arg1 string
	}
	getEmployeesDepartmentFilterReturns struct {
		result1 []model.EmployeeReturn
		result2 error
	}
	getEmployeesDepartmentFilterReturnsOnCall map[int]struct {
		result1 []model.EmployeeReturn
		result2 error
	}
	GetPaginatedEmployeesStub        func(int, int) (model.PaginatedPayload, error)
	getPaginatedEmployeesMutex       sync.RWMutex
	getPaginatedEmployeesArgsForCall []struct {
		arg1 int
		arg2 int
	}
	getPaginatedEmployeesReturns struct {
		result1 model.PaginatedPayload
		result2 error
	}
	getPaginatedEmployeesReturnsOnCall map[int]struct {
		result1 model.PaginatedPayload
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceInterface) AddShift(arg1 model.Employee, arg2 model.Shift) ([]model.Shift, error) {
	fake.addShiftMutex.Lock()
	ret, specificReturn := fake.addShiftReturnsOnCall[len(fake.addShiftArgsForCall)]
	fake.addShiftArgsForCall = append(fake.addShiftArgsForCall, struct {
		arg1 model.Employee
		arg2 model.Shift
	}{arg1, arg2})
	stub := fake.AddShiftStub
	fakeReturns := fake.addShiftReturns
	fake.recordInvocation("AddShift", []interface{}{arg1, arg2})
	fake.addShiftMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) AddShiftCallCount() int {
	fake.addShiftMutex.RLock()
	defer fake.addShiftMutex.RUnlock()
	return len(fake.addShiftArgsForCall)
}

func (fake *FakeServiceInterface) AddShiftCalls(stub func(model.Employee, model.Shift) ([]model.Shift, error)) {
	fake.addShiftMutex.Lock()
	defer fake.addShiftMutex.Unlock()
	fake.AddShiftStub = stub
}

func (fake *FakeServiceInterface) AddShiftArgsForCall(i int) (model.Employee, model.Shift) {
	fake.addShiftMutex.RLock()
	defer fake.addShiftMutex.RUnlock()
	argsForCall := fake.addShiftArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceInterface) AddShiftReturns(result1 []model.Shift, result2 error) {
	fake.addShiftMutex.Lock()
	defer fake.addShiftMutex.Unlock()
	fake.AddShiftStub = nil
	fake.addShiftReturns = struct {
		result1 []model.Shift
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) AddShiftReturnsOnCall(i int, result1 []model.Shift, result2 error) {
	fake.addShiftMutex.Lock()
	defer fake.addShiftMutex.Unlock()
	fake.AddShiftStub = nil
	if fake.addShiftReturnsOnCall == nil {
		fake.addShiftReturnsOnCall = make(map[int]struct {
			result1 []model.Shift
			result2 error
		})
	}
	fake.addShiftReturnsOnCall[i] = struct {
		result1 []model.Shift
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) CreateEmployees(arg1 []model.Employee) (interface{}, error) {
	var arg1Copy []model.Employee
	if arg1 != nil {
		arg1Copy = make([]model.Employee, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createEmployeesMutex.Lock()
	ret, specificReturn := fake.createEmployeesReturnsOnCall[len(fake.createEmployeesArgsForCall)]
	fake.createEmployeesArgsForCall = append(fake.createEmployeesArgsForCall, struct {
		arg1 []model.Employee
	}{arg1Copy})
	stub := fake.CreateEmployeesStub
	fakeReturns := fake.createEmployeesReturns
	fake.recordInvocation("CreateEmployees", []interface{}{arg1Copy})
	fake.createEmployeesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) CreateEmployeesCallCount() int {
	fake.createEmployeesMutex.RLock()
	defer fake.createEmployeesMutex.RUnlock()
	return len(fake.createEmployeesArgsForCall)
}

func (fake *FakeServiceInterface) CreateEmployeesCalls(stub func([]model.Employee) (interface{}, error)) {
	fake.createEmployeesMutex.Lock()
	defer fake.createEmployeesMutex.Unlock()
	fake.CreateEmployeesStub = stub
}

func (fake *FakeServiceInterface) CreateEmployeesArgsForCall(i int) []model.Employee {
	fake.createEmployeesMutex.RLock()
	defer fake.createEmployeesMutex.RUnlock()
	argsForCall := fake.createEmployeesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) CreateEmployeesReturns(result1 interface{}, result2 error) {
	fake.createEmployeesMutex.Lock()
	defer fake.createEmployeesMutex.Unlock()
	fake.CreateEmployeesStub = nil
	fake.createEmployeesReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) CreateEmployeesReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.createEmployeesMutex.Lock()
	defer fake.createEmployeesMutex.Unlock()
	fake.CreateEmployeesStub = nil
	if fake.createEmployeesReturnsOnCall == nil {
		fake.createEmployeesReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.createEmployeesReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) DeleteEmployee(arg1 string) (interface{}, error) {
	fake.deleteEmployeeMutex.Lock()
	ret, specificReturn := fake.deleteEmployeeReturnsOnCall[len(fake.deleteEmployeeArgsForCall)]
	fake.deleteEmployeeArgsForCall = append(fake.deleteEmployeeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteEmployeeStub
	fakeReturns := fake.deleteEmployeeReturns
	fake.recordInvocation("DeleteEmployee", []interface{}{arg1})
	fake.deleteEmployeeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) DeleteEmployeeCallCount() int {
	fake.deleteEmployeeMutex.RLock()
	defer fake.deleteEmployeeMutex.RUnlock()
	return len(fake.deleteEmployeeArgsForCall)
}

func (fake *FakeServiceInterface) DeleteEmployeeCalls(stub func(string) (interface{}, error)) {
	fake.deleteEmployeeMutex.Lock()
	defer fake.deleteEmployeeMutex.Unlock()
	fake.DeleteEmployeeStub = stub
}

func (fake *FakeServiceInterface) DeleteEmployeeArgsForCall(i int) string {
	fake.deleteEmployeeMutex.RLock()
	defer fake.deleteEmployeeMutex.RUnlock()
	argsForCall := fake.deleteEmployeeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) DeleteEmployeeReturns(result1 interface{}, result2 error) {
	fake.deleteEmployeeMutex.Lock()
	defer fake.deleteEmployeeMutex.Unlock()
	fake.DeleteEmployeeStub = nil
	fake.deleteEmployeeReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) DeleteEmployeeReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.deleteEmployeeMutex.Lock()
	defer fake.deleteEmployeeMutex.Unlock()
	fake.DeleteEmployeeStub = nil
	if fake.deleteEmployeeReturnsOnCall == nil {
		fake.deleteEmployeeReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.deleteEmployeeReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) GetEmployeeById(arg1 string) model.Employee {
	fake.getEmployeeByIdMutex.Lock()
	ret, specificReturn := fake.getEmployeeByIdReturnsOnCall[len(fake.getEmployeeByIdArgsForCall)]
	fake.getEmployeeByIdArgsForCall = append(fake.getEmployeeByIdArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetEmployeeByIdStub
	fakeReturns := fake.getEmployeeByIdReturns
	fake.recordInvocation("GetEmployeeById", []interface{}{arg1})
	fake.getEmployeeByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceInterface) GetEmployeeByIdCallCount() int {
	fake.getEmployeeByIdMutex.RLock()
	defer fake.getEmployeeByIdMutex.RUnlock()
	return len(fake.getEmployeeByIdArgsForCall)
}

func (fake *FakeServiceInterface) GetEmployeeByIdCalls(stub func(string) model.Employee) {
	fake.getEmployeeByIdMutex.Lock()
	defer fake.getEmployeeByIdMutex.Unlock()
	fake.GetEmployeeByIdStub = stub
}

func (fake *FakeServiceInterface) GetEmployeeByIdArgsForCall(i int) string {
	fake.getEmployeeByIdMutex.RLock()
	defer fake.getEmployeeByIdMutex.RUnlock()
	argsForCall := fake.getEmployeeByIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) GetEmployeeByIdReturns(result1 model.Employee) {
	fake.getEmployeeByIdMutex.Lock()
	defer fake.getEmployeeByIdMutex.Unlock()
	fake.GetEmployeeByIdStub = nil
	fake.getEmployeeByIdReturns = struct {
		result1 model.Employee
	}{result1}
}

func (fake *FakeServiceInterface) GetEmployeeByIdReturnsOnCall(i int, result1 model.Employee) {
	fake.getEmployeeByIdMutex.Lock()
	defer fake.getEmployeeByIdMutex.Unlock()
	fake.GetEmployeeByIdStub = nil
	if fake.getEmployeeByIdReturnsOnCall == nil {
		fake.getEmployeeByIdReturnsOnCall = make(map[int]struct {
			result1 model.Employee
		})
	}
	fake.getEmployeeByIdReturnsOnCall[i] = struct {
		result1 model.Employee
	}{result1}
}

func (fake *FakeServiceInterface) GetEmployeesDepartmentFilter(arg1 string) ([]model.EmployeeReturn, error) {
	fake.getEmployeesDepartmentFilterMutex.Lock()
	ret, specificReturn := fake.getEmployeesDepartmentFilterReturnsOnCall[len(fake.getEmployeesDepartmentFilterArgsForCall)]
	fake.getEmployeesDepartmentFilterArgsForCall = append(fake.getEmployeesDepartmentFilterArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetEmployeesDepartmentFilterStub
	fakeReturns := fake.getEmployeesDepartmentFilterReturns
	fake.recordInvocation("GetEmployeesDepartmentFilter", []interface{}{arg1})
	fake.getEmployeesDepartmentFilterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) GetEmployeesDepartmentFilterCallCount() int {
	fake.getEmployeesDepartmentFilterMutex.RLock()
	defer fake.getEmployeesDepartmentFilterMutex.RUnlock()
	return len(fake.getEmployeesDepartmentFilterArgsForCall)
}

func (fake *FakeServiceInterface) GetEmployeesDepartmentFilterCalls(stub func(string) ([]model.EmployeeReturn, error)) {
	fake.getEmployeesDepartmentFilterMutex.Lock()
	defer fake.getEmployeesDepartmentFilterMutex.Unlock()
	fake.GetEmployeesDepartmentFilterStub = stub
}

func (fake *FakeServiceInterface) GetEmployeesDepartmentFilterArgsForCall(i int) string {
	fake.getEmployeesDepartmentFilterMutex.RLock()
	defer fake.getEmployeesDepartmentFilterMutex.RUnlock()
	argsForCall := fake.getEmployeesDepartmentFilterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeServiceInterface) GetEmployeesDepartmentFilterReturns(result1 []model.EmployeeReturn, result2 error) {
	fake.getEmployeesDepartmentFilterMutex.Lock()
	defer fake.getEmployeesDepartmentFilterMutex.Unlock()
	fake.GetEmployeesDepartmentFilterStub = nil
	fake.getEmployeesDepartmentFilterReturns = struct {
		result1 []model.EmployeeReturn
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) GetEmployeesDepartmentFilterReturnsOnCall(i int, result1 []model.EmployeeReturn, result2 error) {
	fake.getEmployeesDepartmentFilterMutex.Lock()
	defer fake.getEmployeesDepartmentFilterMutex.Unlock()
	fake.GetEmployeesDepartmentFilterStub = nil
	if fake.getEmployeesDepartmentFilterReturnsOnCall == nil {
		fake.getEmployeesDepartmentFilterReturnsOnCall = make(map[int]struct {
			result1 []model.EmployeeReturn
			result2 error
		})
	}
	fake.getEmployeesDepartmentFilterReturnsOnCall[i] = struct {
		result1 []model.EmployeeReturn
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) GetPaginatedEmployees(arg1 int, arg2 int) (model.PaginatedPayload, error) {
	fake.getPaginatedEmployeesMutex.Lock()
	ret, specificReturn := fake.getPaginatedEmployeesReturnsOnCall[len(fake.getPaginatedEmployeesArgsForCall)]
	fake.getPaginatedEmployeesArgsForCall = append(fake.getPaginatedEmployeesArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	stub := fake.GetPaginatedEmployeesStub
	fakeReturns := fake.getPaginatedEmployeesReturns
	fake.recordInvocation("GetPaginatedEmployees", []interface{}{arg1, arg2})
	fake.getPaginatedEmployeesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInterface) GetPaginatedEmployeesCallCount() int {
	fake.getPaginatedEmployeesMutex.RLock()
	defer fake.getPaginatedEmployeesMutex.RUnlock()
	return len(fake.getPaginatedEmployeesArgsForCall)
}

func (fake *FakeServiceInterface) GetPaginatedEmployeesCalls(stub func(int, int) (model.PaginatedPayload, error)) {
	fake.getPaginatedEmployeesMutex.Lock()
	defer fake.getPaginatedEmployeesMutex.Unlock()
	fake.GetPaginatedEmployeesStub = stub
}

func (fake *FakeServiceInterface) GetPaginatedEmployeesArgsForCall(i int) (int, int) {
	fake.getPaginatedEmployeesMutex.RLock()
	defer fake.getPaginatedEmployeesMutex.RUnlock()
	argsForCall := fake.getPaginatedEmployeesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceInterface) GetPaginatedEmployeesReturns(result1 model.PaginatedPayload, result2 error) {
	fake.getPaginatedEmployeesMutex.Lock()
	defer fake.getPaginatedEmployeesMutex.Unlock()
	fake.GetPaginatedEmployeesStub = nil
	fake.getPaginatedEmployeesReturns = struct {
		result1 model.PaginatedPayload
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) GetPaginatedEmployeesReturnsOnCall(i int, result1 model.PaginatedPayload, result2 error) {
	fake.getPaginatedEmployeesMutex.Lock()
	defer fake.getPaginatedEmployeesMutex.Unlock()
	fake.GetPaginatedEmployeesStub = nil
	if fake.getPaginatedEmployeesReturnsOnCall == nil {
		fake.getPaginatedEmployeesReturnsOnCall = make(map[int]struct {
			result1 model.PaginatedPayload
			result2 error
		})
	}
	fake.getPaginatedEmployeesReturnsOnCall[i] = struct {
		result1 model.PaginatedPayload
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addShiftMutex.RLock()
	defer fake.addShiftMutex.RUnlock()
	fake.createEmployeesMutex.RLock()
	defer fake.createEmployeesMutex.RUnlock()
	fake.deleteEmployeeMutex.RLock()
	defer fake.deleteEmployeeMutex.RUnlock()
	fake.getEmployeeByIdMutex.RLock()
	defer fake.getEmployeeByIdMutex.RUnlock()
	fake.getEmployeesDepartmentFilterMutex.RLock()
	defer fake.getEmployeesDepartmentFilterMutex.RUnlock()
	fake.getPaginatedEmployeesMutex.RLock()
	defer fake.getPaginatedEmployeesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.ServiceInterface = new(FakeServiceInterface)
