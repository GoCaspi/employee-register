{
	"info": {
		"_postman_id": "b675774b-a52b-4195-a47a-1f75997e20f4",
		"name": "EmployeeRegister",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20995631"
	},
	"item": [
		{
			"name": "GetById",
			"item": [
				{
					"name": "ValidCall",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = \"9\"",
									"pm.environment.set('id',id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All mock data gets displayed and the status code is ok=200\",function(){",
									"    let responseStatus = pm.response.status",
									"    let expectedStatus = 200",
									"    pm.expect(responseStatus == expectedStatus)",
									"    let response = pm.response.json()",
									"    validate(response)",
									"    })",
									"",
									"    function validate(res)",
									"    {",
									"     pm.expect(res).to.have.property(\"id\")",
									"     pm.expect(res).to.have.property(\"first_name\")",
									"     pm.expect(res).to.have.property(\"last_name\")",
									"     pm.expect(res).to.have.property(\"email\")",
									"    }",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{id}}/get",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{id}}",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidCall_noEmployeeToThatId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = \"9\"",
									"pm.environment.set('id',id)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All mock data gets displayed and the status code is ok=200\",function(){",
									"    let responseStatus = pm.response.status",
									"    let expectedStatus = 400",
									"    ",
									"    pm.expect(responseStatus == expectedStatus)",
									"    let response = pm.response.json()",
									"",
									"   validate(response)",
									"    })",
									"",
									"    function validate(res)",
									"    {",
									"  //      let expectedResponse = \"Employee to that id was not found\"",
									"   pm.expect(res).to.have.property(\"errorMessage\")",
									"",
									"    }",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{id}}/get",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{id}}",
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreateEmployees",
			"item": [
				{
					"name": "ValidCall",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let mockId1 = Date.now()",
									"let mockFirstName1 = \"Uca\"",
									"let mockFirstName2 = \"Iled\"",
									"let mockFirstName3 = \"Ils\"",
									"let mockId2 = Date.now()",
									"let mockLastName1 = \"Hauer\"",
									"let mockLastName2 = \"Issi\"",
									"let mockLastName3 = \"Iller\"",
									"let mockId3 = Date.now()",
									"let mockEmail1 = mockFirstName1+mockLastName1+\"@mail.com\"",
									"let mockEmail2 = mockFirstName2+mockLastName2+\"@mail.com\"",
									"let mockEmail3 = mockFirstName3+mockLastName3+\"@mail.com\"",
									"",
									"pm.environment.set('mockId1',mockId1)",
									"pm.environment.set('mockId2',mockId2)",
									"pm.environment.set('mockId3',mockId3)",
									"pm.environment.set('mockFirstName1',mockFirstName1)",
									"pm.environment.set('mockFirstName2',mockFirstName2)",
									"pm.environment.set('mockFirstName3',mockFirstName3)",
									"pm.environment.set('mockLastName1',mockLastName1)",
									"pm.environment.set('mockLastName2',mockLastName2)",
									"pm.environment.set('mockLastName3',mockLastName3)",
									"pm.environment.set('mockEmail1',mockEmail1)",
									"pm.environment.set('mockEmail2',mockEmail2)",
									"pm.environment.set('mockEmail3',mockEmail3)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All mock data gets saved to the database and the status code is ok=200\",function(){",
									"    let responseStatus = pm.response.status",
									"    let expectedStatus = 200",
									"    pm.expect(responseStatus == expectedStatus)",
									"    let response = pm.response.json()",
									"   pm.expect(response.length == 3)",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"employees\": [\n    {\n      \"id\": \"{{mockId1}}\",\n      \"first_name\": \"{{mockFirstName1}}\",\n      \"last_name\": \"{{mockLastName1}}\",\n      \"email\": \"{{mockEmail1}}\"\n    },\n    {\n      \"id\": \"{{mockId2}}\",\n      \"first_name\": \"{{mockFirstName2}}\",\n      \"last_name\": \"{{mockLastName2}}\",\n      \"email\": \"{{mockEmail2}}\"\n    },\n    {\n      \"id\": \"{{mockId3}}\",\n      \"first_name\": \"{{mockFirstName3}}\",\n      \"last_name\": \"{{mockLastName3}}\",\n      \"email\": \"{{mockEmail3}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "InvalidCall_Id has no quotation marks_badPayload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let mockId1 = Date.now()",
									"let mockFirstName1 = \"Uca\"",
									"let mockFirstName2 = \"Iled\"",
									"let mockFirstName3 = \"Ils\"",
									"let mockId2 = Date.now()",
									"let mockLastName1 = \"Hauer\"",
									"let mockLastName2 = \"Issi\"",
									"let mockLastName3 = \"Iller\"",
									"let mockId3 = Date.now()",
									"let mockEmail1 = mockFirstName1+mockLastName1+\"@mail.com\"",
									"let mockEmail2 = mockFirstName2+mockLastName2+\"@mail.com\"",
									"let mockEmail3 = mockFirstName3+mockLastName3+\"@mail.com\"",
									"",
									"pm.environment.set('mockId1',mockId1)",
									"pm.environment.set('mockId2',mockId2)",
									"pm.environment.set('mockId3',mockId3)",
									"pm.environment.set('mockFirstName1',mockFirstName1)",
									"pm.environment.set('mockFirstName2',mockFirstName2)",
									"pm.environment.set('mockFirstName3',mockFirstName3)",
									"pm.environment.set('mockLastName1',mockLastName1)",
									"pm.environment.set('mockLastName2',mockLastName2)",
									"pm.environment.set('mockLastName3',mockLastName3)",
									"pm.environment.set('mockEmail1',mockEmail1)",
									"pm.environment.set('mockEmail2',mockEmail2)",
									"pm.environment.set('mockEmail3',mockEmail3)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All mock data gets saved to the database and the status code is ok=200\",function(){",
									"    let responseStatus = pm.response.status",
									"    let expectedStatus = 400",
									"    pm.expect(responseStatus == expectedStatus)",
									"    let response = pm.response.json()",
									"  validate(response)",
									"    })",
									"",
									"    function validate(res)",
									"    {",
									"  //      let expectedResponse = \"Employee to that id was not found\"",
									"   pm.expect(res).to.have.property(\"errorMessage\")",
									"",
									"    }",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"employees\": [\n    {\n      \"id\": {{mockId1}},\n      \"first_name\": \"{{mockFirstName1}}\",\n      \"last_name\": \"{{mockLastName1}}\",\n      \"email\": \"{{mockEmail1}}\"\n    },\n    {\n      \"id\": \"{{mockId2}}\",\n      \"first_name\": \"{{mockFirstName2}}\",\n      \"last_name\": \"{{mockLastName2}}\",\n      \"email\": \"{{mockEmail2}}\"\n    },\n    {\n      \"id\": \"{{mockId3}}\",\n      \"first_name\": \"{{mockFirstName3}}\",\n      \"last_name\": \"{{mockLastName3}}\",\n      \"email\": \"{{mockEmail3}}\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}